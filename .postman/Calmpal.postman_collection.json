{
  "info": {
    "_postman_id": "56114a97-9228-4eff-934e-ced3f97c682a",
    "name": "Calmpal",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "15205417"
  },
  "item": [
    {
      "name": "sign up",
      "item": [
        {
          "name": "Create a new user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const userFirstName = pm.variables.replaceIn('{{$randomFirstName}}');",
                  "const userLastName = pm.variables.replaceIn('{{$randomLastName}}');",
                  "",
                  "pm.collectionVariables.set(\"userName\", userFirstName + \" \" + userLastName);",
                  "pm.collectionVariables.set(\"userEmail\", userFirstName + userLastName + \"@example.test\");",
                  "pm.collectionVariables.set(\"userPassword\", pm.variables.replaceIn('{{$randomPassword}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();",
                  "",
                  "pm.test(\"Status Code is 201 Created\", () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Validation of schema\", () => {",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"userWithTokenSchema\")));",
                  "});",
                  "",
                  "pm.test(\"Response Data is correct\", () => {",
                  "  pm.expect(responseJson.user.fullName).to.eql(pm.collectionVariables.get(\"userName\"));",
                  "  pm.expect(responseJson.user.email).to.eql(pm.collectionVariables.get(\"userEmail\"));",
                  "  pm.expect(responseJson.user.isSurveyCompleted).to.eql(false);",
                  "});",
                  "",
                  "// saving Token value for further requests",
                  "pm.collectionVariables.set(\"token\", responseJson.token);",
                  "",
                  "// saving id value for further requests",
                  "pm.collectionVariables.set(\"userID\", responseJson.user.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"fullName\": \"{{userName}}\",\n  \"password\": \"{{userPassword}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-up",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-up"]
            }
          },
          "response": []
        },
        {
          "name": "Create a new user with already existing e-mail",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();",
                  "",
                  "pm.test(\"Status Code is 400 Bad Request\", () => {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response Schema Validation\", () => {",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"errorSchema\")));",
                  "});",
                  "",
                  "pm.test(\"Response Data is correct\", () => {",
                  "  pm.expect(responseJson.message).to.eql(\"User already exists.\"),",
                  "  pm.expect(responseJson.errorType).to.eql(\"AUTHORIZATION\")",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"fullName\": \"{{userName}}\",\n  \"password\": \"{{userPassword}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-up",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-up"]
            }
          },
          "response": []
        },
        {
          "name": "Create a new user with invalid email",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();",
                  "",
                  "pm.test(\"Response Schema Validation\", () => {",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"errorSchema\")));",
                  "});",
                  "",
                  "pm.test(\"Status Code is 422 Unprocessable Entity\", () => {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Response Data is correct\", () => {",
                  "  pm.expect(responseJson.message).to.eql(\"Email is wrong.\"),",
                  "  pm.expect(responseJson.errorType).to.eql(\"VALIDATION\")",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{invalidEmail}}\",\n  \"fullName\": \"{{userName}}\",\n  \"password\": \"{{userPassword}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-up",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-up"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "sign in",
      "item": [
        {
          "name": "Sign in with valid credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"userWithTokenSchema\")));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response Data is correct\", () => {\r",
                  "  pm.expect(responseJson.user.fullName).to.eql(pm.collectionVariables.get(\"userName\"));\r",
                  "  pm.expect(responseJson.user.email).to.eql(pm.collectionVariables.get(\"userEmail\"));\r",
                  "  pm.expect(responseJson.user.id).to.eql(JSON.parse(pm.collectionVariables.get(\"userID\")));\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-in"]
            }
          },
          "response": []
        },
        {
          "name": "Sign in with valid email and invalid password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 401 Unauthorized\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response Data is correct\", () => {\r",
                  "  pm.expect(responseJson.message).to.include(\"Incorrect credentials\");\r",
                  "  pm.expect(responseJson.errorType).to.include(\"AUTHORIZATION\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"errorSchema\")));\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-in"]
            }
          },
          "response": []
        },
        {
          "name": "Sign in of non-registered user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 404 Not Found\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response data is correct\", () => {\r",
                  "  pm.expect(responseJson.message).to.include(\"User with these credentials was not found\");\r",
                  "  pm.expect(responseJson.errorType).to.include(\"USERS\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"errorSchema\")));\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-in"]
            }
          },
          "response": []
        },
        {
          "name": "Sign in with invalid email and valid password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status Code is 422 Unprocessable Entity\", () => {\r",
                  "    pm.response.to.have.status(422);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"errorSchema\")));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response Data is correct\", () => {\r",
                  "  pm.expect(responseJson.message).to.eql(\"Email is wrong.\"),\r",
                  "  pm.expect(responseJson.errorType).to.eql(\"VALIDATION\")\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "followAuthorizationHeader": false,
            "followOriginalHttpMethod": false
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"{{invalidEmail}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-in"]
            }
          },
          "response": []
        },
        {
          "name": "Sign in with empty email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
                  "    pm.response.to.have.status(422);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"errorSchema\")));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response data is correct\", () => {\r",
                  "  pm.expect(responseJson.message).to.include(\"Email is required.\");\r",
                  "  pm.expect(responseJson.errorType).to.include(\"VALIDATION\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "followAuthorizationHeader": false,
            "followOriginalHttpMethod": false
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"{{userPassword}}\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-in"]
            }
          },
          "response": []
        },
        {
          "name": "Sign in with empty password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
                  "    pm.response.to.have.status(422);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error message and type are correct\", () => {\r",
                  "  pm.expect(responseJson.message).to.include(\"Password is required.\");\r",
                  "  pm.expect(responseJson.errorType).to.include(\"VALIDATION\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"errorSchema\")));\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "followAuthorizationHeader": false,
            "followOriginalHttpMethod": false
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-in",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-in"]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "authentication",
      "item": [
        {
          "name": "Get data of authenticated user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "const userSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "              \"id\": {\"type\": \"integer\"},\r",
                  "              \"email\": { \"type\": \"string\"},\r",
                  "              \"fullName\": {\"type\": \"string\"},\r",
                  "              \"createdAt\": { \"type\": \"string\"},\r",
                  "              \"updatedAt\": { \"type\": \"string\"},\r",
                  "              \"isSurveyCompleted\": {\"type\": \"boolean\"}\r",
                  "      }, \r",
                  "    \"requiered\": [\"id\", \"email\", \"fullName\", \"createdAt\", \"updatedAt\", \"isSurveyCompleted\"]\r",
                  "};\r",
                  "\r",
                  "\r",
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(userSchema);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response data is correct\", () => {\r",
                  "    pm.expect(responseJson.id).to.eql(JSON.parse(pm.collectionVariables.get(\"userID\")));\r",
                  "    pm.expect(responseJson.email).to.eql(pm.collectionVariables.get(\"userEmail\"));\r",
                  "    pm.expect(responseJson.fullName).to.eql(pm.collectionVariables.get(\"userName\"));\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/authenticated-user",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "authenticated-user"]
            }
          },
          "response": []
        },
        {
          "name": "Get authenticated user without token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();",
                  "",
                  "pm.test(\"Status Code is 401 Unauthorized\", () => {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Validation of schema\", () => {",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"errorSchema\")));",
                  "});",
                  "",
                  "pm.test(\"Response Data is correct\", () => {",
                  "  pm.expect(responseJson.message).to.eql(\"User is not authorized.\"),",
                  "  pm.expect(responseJson.errorType).to.eql(\"AUTHORIZATION\")",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/authenticated-user",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "authenticated-user"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "survey",
      "item": [
        {
          "name": "Create survey within limit for input field",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const text = pm.collectionVariables.get(\"sampleSurveyText\");\r",
                  "const numberOfsymbols = pm.collectionVariables.get(\"surveyOtherLimit\");\r",
                  "\r",
                  "const surveyText = text.substring(0, Math.random() * numberOfsymbols);\r",
                  "pm.collectionVariables.set(\"otherSurveyText\", surveyText);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 201 Created\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema((JSON.parse(pm.collectionVariables.get(\"surveySchema\"))));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response Data is correct\", () => {\r",
                  "  pm.expect(responseJson.userId).to.eql(JSON.parse(pm.collectionVariables.get(\"userID\")));\r",
                  "  pm.expect(responseJson.preferences[0]).to.eql(pm.collectionVariables.get(\"otherSurveyText\"));\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"userId\": {{userID}},\r\n  \"preferences\": [\"{{otherSurveyText}}\"]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-up/survey",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-up", "survey"]
            }
          },
          "response": []
        },
        {
          "name": "Create survey with empty preferences",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 422\", function () {\r",
                  "    pm.response.to.have.status(422);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"errorSchema\")));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response Data is correct\", () => {\r",
                  "  pm.expect(responseJson.message).to.eql(\"\\\"preferences[0]\\\" is not allowed to be empty\"),\r",
                  "  pm.expect(responseJson.errorType).to.eql(\"VALIDATION\")\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"userId\": {{userID}},\r\n  \"preferences\": [\"\"]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-up/survey",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-up", "survey"]
            }
          },
          "response": []
        },
        {
          "name": "Create survey for unauthorized user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 401\", function () {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"errorSchema\")));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response Data is correct\", () => {\r",
                  "  pm.expect(responseJson.message).to.eql(\"User is not authorized.\"),\r",
                  "  pm.expect(responseJson.errorType).to.eql(\"AUTHORIZATION\")\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"userId\": {{userID}},\r\n  \"preferences\": [\"Improve focus\"]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/sign-up/survey",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "sign-up", "survey"]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "uploading of avatar",
      "item": [
        {
          "name": "Uploading of valid avatar (JPEG/PNG)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const fileSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"properties\": {\r",
                  "              \"id\": {\"type\": \"integer\"},\r",
                  "              \"url\": {\"type\": \"string\"},\r",
                  "              \"contentType\": {\"type\": \"string\"},\r",
                  "              \"createdAt\": { \"type\": \"string\"},\r",
                  "              \"updatedAt\": { \"type\": \"string\"}\r",
                  "      },\r",
                  "    \"required\": [\"id\", \"url\", \"contentType\", \"createdAt\", \"updatedAt\"] \r",
                  "};\r",
                  "\r",
                  "pm.test(\"Status code is 201 Created\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(fileSchema);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": ".postman/assets/gift.png"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/files/upload",
              "host": ["{{baseUrl}}"],
              "path": ["files", "upload"]
            }
          },
          "response": []
        },
        {
          "name": "Uploading of avatar of invalid format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"errorSchema\")));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error message and type are correct\", () => {\r",
                  "  pm.expect(responseJson.message).to.include(\"File extension should be one of PNG, JPEG, MPEG.\");\r",
                  "  pm.expect(responseJson.errorType).to.include(\"FILE\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "file",
                "value": "",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": ".postman/assets/test.txt"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/files/upload",
              "host": ["{{baseUrl}}"],
              "path": ["files", "upload"]
            }
          },
          "response": []
        },
        {
          "name": "Uploading of avatar of invalid size (> than 10 Mb)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"errorSchema\")));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error message and type are correct\", () => {\r",
                  "  pm.expect(responseJson.message).to.include(\"The inputted file is bigger than 10 MB\");\r",
                  "  pm.expect(responseJson.errorType).to.include(\"FILE\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "file",
                "value": "",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": ".postman/assets/sample-image-ten-mb.png"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/files/upload",
              "host": ["{{baseUrl}}"],
              "path": ["files", "upload"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "journal",
      "item": [
        {
          "name": "Create the journal entry for authorized user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 201 Created\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"journalOneItemSchema\")));\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"journalId\", responseJson.id);\r",
                  "\r",
                  "pm.test(\"Response Data is correct\", () => {\r",
                  "  pm.expect(responseJson.title).to.include(pm.collectionVariables.get(\"journalTitle\"));\r",
                  "  pm.expect(responseJson.text).to.include(pm.collectionVariables.get(\"journalText\"));\r",
                  "  pm.expect(responseJson.userId).to.eql(JSON.parse(pm.collectionVariables.get(\"userID\")));\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const textTitle = pm.collectionVariables.get(\"sampleJournalTitleText\");\r",
                  "const numberOfsymbols = pm.collectionVariables.get(\"journalTitleLimit\");\r",
                  "\r",
                  "const journalTitle = textTitle.substring(0, Math.random() * numberOfsymbols);\r",
                  "pm.collectionVariables.set(\"journalTitle\", journalTitle.trim());\r",
                  "\r",
                  "const journalText = pm.collectionVariables.get(\"sampleJournalBodyText\");\r",
                  "pm.collectionVariables.set(\"journalText\", journalText.trim());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"{{journalTitle}}\",\r\n  \"text\": \"{{journalText}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/journal",
              "host": ["{{baseUrl}}"],
              "path": ["journal"]
            }
          },
          "response": []
        },
        {
          "name": "Change the journal entry",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"journalOneItemSchema\")));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response Data is correct\", () => {\r",
                  "  pm.expect(responseJson.userId).to.eql(JSON.parse(pm.collectionVariables.get(\"userID\")));\r",
                  "    pm.expect(responseJson.title).to.eql(\"New title\");\r",
                  "    pm.expect(responseJson.text).to.eql(\"<p>New text</p>\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"title\": \"New title\",\r\n  \"text\": \"<p>New text</p>\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/journal/{{journalId}}",
              "host": ["{{baseUrl}}"],
              "path": ["journal", "{{journalId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Check the journal entries of authorized user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const journalAllItemsSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"required\": [\r",
                  "        \"items\"\r",
                  "    ],\r",
                  "    \"properties\": {\r",
                  "        \"items\": {\r",
                  "         \"type\": \"array\",\r",
                  "         \"required\":[\r",
                  "             \"id\",\r",
                  "             \"userId\",\r",
                  "            \"title\",\r",
                  "            \"text\",\r",
                  "            \"createdAt\",\r",
                  "            \"updatedAt\"\r",
                  "         ],\r",
                  "         \"properties\": {\r",
                  "            \"id\": {\"type\": \"number\" },\r",
                  "            \"userId\": {\"type\": \"number\"},\r",
                  "            \"title\": {\"type\": \"string\" },\r",
                  "            \"text\": {\"type\": \"string\" },\r",
                  "            \"createdAt\": {\"type\": \"string\"},\r",
                  "            \"updatedAt\": {\"type\": \"string\"}\r",
                  "         }\r",
                  "        }\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(journalAllItemsSchema);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/journal",
              "host": ["{{baseUrl}}"],
              "path": ["journal"]
            }
          },
          "response": []
        },
        {
          "name": "Delete the journal entry",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/journal/{{journalId}}",
              "host": ["{{baseUrl}}"],
              "path": ["journal", "{{journalId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "chats",
      "item": [
        {
          "name": "Create a new chat",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 201 Created\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"oneChatSchema\")));\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"chatId\", responseJson.id);\r",
                  "\r",
                  "pm.test(\"Response Data is correct\", () => {\r",
                  "  pm.expect(responseJson.members[0].userId).to.eql(JSON.parse(pm.collectionVariables.get(\"userID\")));\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"message\": \"I want to talk about my feelings\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/chats",
              "host": ["{{baseUrl}}"],
              "path": ["chats"]
            }
          },
          "response": []
        },
        {
          "name": "Create a new message in a chat",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseJson = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 201 Created\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(JSON.parse(pm.collectionVariables.get(\"chatOneMessageSchema\")));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response Data is correct\", () => {\r",
                  "  pm.expect(responseJson.chatId).to.eql(JSON.parse(pm.collectionVariables.get(\"chatId\")));\r",
                  "    pm.expect(responseJson.senderId).to.eql(JSON.parse(pm.collectionVariables.get(\"userID\")));\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"message\": \"I've been feeling rather lonely yesterday and I think I am loosing connection with my friends\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/chats/{{chatId}}/messages",
              "host": ["{{baseUrl}}"],
              "path": ["chats", "{{chatId}}", "messages"]
            }
          },
          "response": []
        },
        {
          "name": "Check messages in a chat by chat ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const chatAllMessagesSchema = {\r",
                  "  \"type\": \"object\",\r",
                  "  \"required\": [\"items\"],\r",
                  "  \"properties\": {\r",
                  "    \"items\": {\r",
                  "      \"type\": \"object\",\r",
                  "      \"patternProperties\": {\r",
                  "        \"^[A-Za-z]{3} [A-Za-z]{3} [0-9]{1,2} [0-9]{4}$\": {\r",
                  "          \"type\": \"array\",\r",
                  "          \"items\": {\r",
                  "            \"type\": \"object\",\r",
                  "            \"required\": [\"id\", \"createdAt\", \"updatedAt\", \"message\", \"chatId\", \"senderId\"],\r",
                  "            \"properties\": {\r",
                  "              \"id\": { \"type\": \"number\" },\r",
                  "              \"createdAt\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
                  "              \"updatedAt\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
                  "              \"message\": { \"type\": \"string\" },\r",
                  "              \"chatId\": { \"type\": \"number\" },\r",
                  "              \"senderId\": { \"type\": \"number\" }\r",
                  "            }\r",
                  "          }\r",
                  "        }\r",
                  "      }\r",
                  "    }\r",
                  "  }\r",
                  "};\r",
                  "\r",
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(chatAllMessagesSchema);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/chats/{{chatId}}/messages",
              "host": ["{{baseUrl}}"],
              "path": ["chats", "{{chatId}}", "messages"]
            }
          },
          "response": []
        },
        {
          "name": "Ckeck all chats of authorized user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const allChatsSchema = {\r",
                  "    \"type\": \"object\",\r",
                  "    \"required\": [\r",
                  "        \"items\"\r",
                  "    ],\r",
                  "    \"properties\": {\r",
                  "        \"items\": {\r",
                  "         \"type\": \"array\",\r",
                  "         \"required\":[\r",
                  "             \"id\",\r",
                  "             \"name\",\r",
                  "            \"members\",\r",
                  "            \"createdAt\",\r",
                  "            \"updatedAt\"\r",
                  "         ],\r",
                  "         \"properties\": {\r",
                  "            \"id\": {\"type\": \"number\" },\r",
                  "            \"name\": {\"type\": \"string\"},\r",
                  "            \"members\": {\"type\": \"array\" },\r",
                  "            \"createdAt\": {\"type\": \"string\"},\r",
                  "            \"updatedAt\": {\"type\": \"string\"}\r",
                  "         }\r",
                  "       }\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validation of schema\", () => {\r",
                  "    pm.response.to.have.jsonSchema(allChatsSchema);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/chats",
              "host": ["{{baseUrl}}"],
              "path": ["chats"]
            }
          },
          "response": []
        },
        {
          "name": "Delete a chat",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/chats/{{chatId}}",
              "host": ["{{baseUrl}}"],
              "path": ["chats", "{{chatId}}"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "//setting the limits for input fields",
          "const otherSurveyLimit = 1000;",
          "pm.collectionVariables.set(\"surveyOtherLimit\", otherSurveyLimit);",
          "",
          "const journalLitleLimit = 255;",
          "pm.collectionVariables.set(\"journalTitleLimit\", journalLitleLimit);",
          "",
          "// creating schemas for validation check",
          "const userWithTokenSchema = JSON.stringify({",
          "    \"type\": \"object\",",
          "    \"properties\": {",
          "      \"user\": {",
          "          \"type\": \"object\",",
          "          \"properties\":{",
          "              \"id\": {\"type\": \"integer\"},",
          "              \"email\": { \"type\": \"string\"},",
          "              \"fullName\": {\"type\": \"string\"},",
          "              \"createdAt\": { \"type\": \"string\"},",
          "              \"updatedAt\": { \"type\": \"string\"},",
          "              \"isSurveyCompleted\": {\"type\": \"boolean\"}",
          "          },",
          "          \"required\": [",
          "              \"id\",",
          "                \"email\",",
          "                \"fullName\",",
          "                \"createdAt\",",
          "                \"updatedAt\",",
          "                \"isSurveyCompleted\"",
          "              ]",
          "      }, ",
          "      \"token\":{\"type\": \"string\"},",
          "    },",
          "    \"required\": [\"user\", \"token\"]",
          "});",
          "pm.collectionVariables.set(\"userWithTokenSchema\", userWithTokenSchema);",
          "",
          "const errorSchema = JSON.stringify({",
          "    \"type\": \"object\",",
          "    \"properties\": {",
          "        \"message\": { \"type\": \"string\"},",
          "        \"errorType\": { \"type\": \"string\"},",
          "    },",
          "    \"required\": [\"message\", \"errorType\"]",
          "    });",
          "",
          "pm.collectionVariables.set(\"errorSchema\", errorSchema);",
          "",
          "const surveySchema = JSON.stringify({",
          "    \"type\": \"object\",",
          "    \"required\": [",
          "        \"id\",",
          "        \"userId\",",
          "        \"preferences\",",
          "        \"createdAt\",",
          "        \"updatedAt\"",
          "    ],",
          "    \"properties\": {",
          "        \"id\": {\"type\": \"number\" },",
          "        \"userId\": { \"type\": \"number\"},",
          "        \"preferences\": { \"type\": \"array\" },",
          "        \"createdAt\": {\"type\": \"string\"},",
          "        \"updatedAt\": {\"type\": \"string\"}",
          "        },",
          "});",
          "",
          "pm.collectionVariables.set(\"surveySchema\", surveySchema);",
          "",
          "const journalOneItemSchema = JSON.stringify({",
          "         \"type\": \"object\",",
          "         \"required\":[",
          "             \"id\",",
          "             \"userId\",",
          "            \"title\",",
          "            \"text\",",
          "            \"createdAt\",",
          "            \"updatedAt\"",
          "         ],",
          "         \"properties\": {",
          "            \"id\": {\"type\": \"number\" },",
          "            \"userId\": {\"type\": \"number\"},",
          "            \"title\": {\"type\": \"string\" },",
          "            \"text\": {\"type\": \"string\" },",
          "            \"createdAt\": {\"type\": \"string\"},",
          "            \"updatedAt\": {\"type\": \"string\"}",
          "         }",
          "})",
          "",
          "pm.collectionVariables.set(\"journalOneItemSchema\", journalOneItemSchema);",
          "",
          "const chatOneMessageSchema = JSON.stringify({",
          "    \"type\": \"object\",",
          "         \"required\":[",
          "             \"id\",",
          "             \"chatId\",",
          "            \"senderId\",",
          "            \"message\",",
          "            \"createdAt\",",
          "            \"updatedAt\"",
          "         ],",
          "         \"properties\": {",
          "            \"id\": {\"type\": \"number\" },",
          "            \"chatId\": {\"type\": \"number\"},",
          "            \"senderId\": {\"type\": \"number\" },",
          "            \"message\": {\"type\": \"string\" },",
          "            \"createdAt\": {\"type\": \"string\"},",
          "            \"updatedAt\": {\"type\": \"string\"}",
          "         }",
          "})",
          "",
          "pm.collectionVariables.set(\"chatOneMessageSchema\", chatOneMessageSchema);",
          "",
          "const oneChatSchema = JSON.stringify({",
          "     \"type\": \"object\",",
          "     \"required\":[",
          "             \"id\",",
          "             \"name\",",
          "            \"members\",",
          "            \"createdAt\",",
          "            \"updatedAt\"",
          "         ],",
          "         \"properties\": {",
          "            \"id\": {\"type\": \"number\" },",
          "            \"name\": {\"type\": \"string\"},",
          "            \"members\": {\"type\": \"array\" },",
          "            \"createdAt\": {\"type\": \"string\"},",
          "            \"updatedAt\": {\"type\": \"string\"}",
          "         }",
          "})",
          "",
          "pm.collectionVariables.set(\"oneChatSchema\", oneChatSchema);",
          "",
          "// creating sample texts for testing input fields",
          "",
          "const surveyText = \"Over the past few months, I have been experiencing symptoms that lead me to believe I may be struggling with depression. One of the most prominent aspects of my experience has been a persistent feeling of sadness and hopelessness. It feels like a heavy cloud that hangs over me, making it difficult to find joy or excitement in activities that used to bring me pleasure. Even the simplest tasks have become a challenge, and I often find myself lacking motivation or interest in things I once enjoyed. Sleep disturbances have also become a significant issue for me. I find it hard to fall asleep at night, and when I do, I often wake up in the early hours, unable to go back to sleep. This has resulted in a constant state of fatigue and a feeling of being drained, which further exacerbates my sense of hopelessness. Another symptom I have noticed is a significant change in my appetite. There are days when I have little to no interest in eating, while on others, I turn to food as a source of comfort. This erratic pattern has led to fluctuations in my weight, which has added to my feelings of self-doubt and insecurity. Additionally, I've been struggling with concentration and focus. Tasks that used to be routine now feel overwhelming, and I find myself easily distracted or unable to complete them. This has affected my work and personal life, leading to feelings of inadequacy and frustration. Social withdrawal has also become a common behavior for me. I find it increasingly difficult to engage with friends and family, even though I know their support is crucial. The idea of social interactions often feels exhausting, and I tend to isolate myself as a result. I recognize that these symptoms are impacting my overall well-being and daily functioning. Its been a difficult journey, and I believe that seeking professional help is a crucial step towards finding relief and healing. I am grateful to have you as my therapist and trust that together we can work towards understanding and managing these feelings. Your guidance and support mean a great deal to me, and I am committed to being open and honest throughout this process\";",
          "",
          "pm.collectionVariables.set(\"sampleSurveyText\", surveyText);",
          "",
          "const journalTitle = \"The note carries a palpable sense of acceptance and anticipation for the new day, portraying my attuned to the nuances of my own existence and eagerness to learn from each emotional encounter. It's a testament to my deep connection with my inner self and my ability to find solace in the act of reflection.  It embraces moments of melancholy with grace, finding gratitude in the capacity to experience the full spectrum of human emotions.\";",
          "",
          "pm.collectionVariables.set(\"sampleJournalTitleText\", journalTitle);",
          "",
          "const journalBody = \"<p>Today, the sky painted itself in soft shades of pink and gold, a serene backdrop to the tumultuous sea of emotions within. As I sit here with pen in hand, I find solace in the act of putting these thoughts to paper. There's a certain liberation in allowing my innermost feelings to flow freely, unburdening my soul. The day began with a peculiar heaviness, a cloud that settled over my spirit like a shroud. It felt as though I was wading through a sea of molasses, every step weighed down by unseen anchors. It's days like these that remind me of the intricate dance between mind and heart, how they synchronize their steps or trip over each other, leaving me to find my own rhythm. And so, as the day draws to a close, I find myself leaning into acceptance. This mood, like all others, is but a passing visitor in the grand theater of my life. It whispers lessons, offers perspective, and gently guides me toward a deeper understanding of self.</p>\"",
          "",
          "pm.collectionVariables.set(\"sampleJournalBodyText\", journalBody);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "userName",
      "value": "",
      "type": "string"
    },
    {
      "key": "userEmail",
      "value": "",
      "type": "string"
    },
    {
      "key": "userPassword",
      "value": "",
      "type": "string"
    },
    {
      "key": "userID",
      "value": "",
      "type": "string"
    },
    {
      "key": "invalidEmail",
      "value": "invalidemailtest.com",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    },
    {
      "key": "userWithTokenSchema",
      "value": "",
      "type": "string"
    },
    {
      "key": "errorSchema",
      "value": "",
      "type": "string"
    },
    {
      "key": "surveySchema",
      "value": "",
      "type": "string"
    },
    {
      "key": "sampleSurveyText",
      "value": "",
      "type": "string"
    },
    {
      "key": "otherSurveyText",
      "value": "",
      "type": "string"
    },
    {
      "key": "surveyOtherLimit",
      "value": "",
      "type": "string"
    },
    {
      "key": "journalTitleLimit",
      "value": "",
      "type": "string"
    },
    {
      "key": "journalText",
      "value": "",
      "type": "string"
    },
    {
      "key": "journalOneItemSchema",
      "value": "",
      "type": "string"
    },
    {
      "key": "journalId",
      "value": "",
      "type": "string"
    },
    {
      "key": "chatId",
      "value": "",
      "type": "string"
    },
    {
      "key": "chatOneMessageSchema",
      "value": "",
      "type": "string"
    },
    {
      "key": "oneChatSchema",
      "value": "",
      "type": "string"
    },
    {
      "key": "sampleJournalTitleText",
      "value": ""
    },
    {
      "key": "sampleJournalBodyText",
      "value": ""
    },
    {
      "key": "journalTitle",
      "value": ""
    },
    {
      "key": "baseUrl",
      "value": "http://localhost:3001/api/v1",
      "type": "string"
    },
    {
      "key": "userWithToken1Schema",
      "value": ""
    }
  ]
}
